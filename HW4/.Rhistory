## install.packages("caret")
library('manipulate')
library('MASS') ## for 'mcycle'
library('manipulate') ## for 'manipulate'
# Load the caret package
library(caret)
mcycle
y <- mcycle$accel
x <- matrix(mcycle$times, length(mcycle$times), 1)
plot(x, y, xlab="Time (ms)", ylab="Acceleration (g)")
data(mcycle)
# Split the data into training and test sets
set.seed(123) # Set seed for reproducibility
trainIndex <- createDataPartition(mcycle$times, p = 0.75, list = FALSE)
train <- mcycle[trainIndex, ]
test <- mcycle[-trainIndex, ]
data(mcycle)
# Split the data into training and test sets
set.seed(123) # Set seed for reproducibility
trainIndex <- createDataPartition(mcycle$times, p = 0.75, list = FALSE)
train <- mcycle[trainIndex, ]
test <- mcycle[-trainIndex, ]
## k-NN kernel function
## x  - n x p matrix of training inputs
## x0 - 1 x p input where to make prediction
## k  - number of nearest neighbors
kernel_k_nearest_neighbors <- function(x, x0, k=1) {
## compute distance betwen each x and x0
z <- t(t(x) - x0)
d <- sqrt(rowSums(z*z))
## initialize kernel weights to zero
w <- rep(0, length(d))
## set weight to 1 for k nearest neighbors
w[order(d)[1:k]] <- 1
return(w)
}
## Make predictions using the NW method
## y  - n x 1 vector of training outputs
## x  - n x p matrix of training inputs
## x0 - m x p matrix where to make predictions
## kern  - kernel function to use
## ... - arguments to pass to kernel function
nadaraya_watson <- function(y, x, x0, kern, ...) {
k <- t(apply(x0, 1, function(x0_) {
k_ <- kern(x, x0_, ...)
k_/sum(k_)
}))
yhat <- drop(k %*% y)
return(yhat)
}
x_plot <- matrix(seq(min(x),max(x),length.out=1000),1000,1)
plot(x, y, xlab="Time (ms)", ylab="Acceleration (g)")
lines(x_plot,nadaraya_watson(train$accel, train$times, x_plot,kern = kernel_k_nearest_neighbors, k=1),col="#882255", lwd=2)
## Compute effective df using NW method
## y  - n x 1 vector of training outputs
## x  - n x p matrix of training inputs
## kern  - kernel function to use
## ... - arguments to pass to kernel function
effective_df <- function(y, x, kern, ...) {
y_hat <- nadaraya_watson(y, x, x,
kern=kern, ...)
sum(diag(attr(y_hat, 'k')))
}
## loss function
## y    - train/test y
## yhat - predictions at train/test x
loss_squared_error <- function(y, yhat)
(y - yhat)^2
## test/train error
## y    - train/test y
## yhat - predictions at train/test x
## loss - loss function
error <- function(y, yhat, loss=loss_squared_error)
mean(loss(y, yhat))
## AIC
## y    - training y
## yhat - predictions at training x
## d    - effective degrees of freedom
aic <- function(y, yhat, d)
error(y, yhat) + 2/length(y)*d
## BIC
## y    - training y
## yhat - predictions at training x
## d    - effective degrees of freedom
bic <- function(y, yhat, d)
error(y, yhat) + log(length(y))/length(y)*d
edf = 0
for(i in 1:20){
edf[i] = effective_df(train$accel, matrix(train$times), kern =  kernel_k_nearest_neighbors,k=i)
}
## training error
training_error_plot = 0
for (i in 1:20) {
y_hat = nadaraya_watson(train$accel, train$times, matrix(train$times),kern = kernel_k_nearest_neighbors, k=i)
training_error_plot[i] = error(train$accel,y_hat,loss=loss_squared_error)
}
## testing error
testing_error_plot = 0
for (i in 1:20) {
y_hat = nadaraya_watson(train$accel, train$times, matrix(test$times),kern = kernel_k_nearest_neighbors, k=i)
testing_error_plot[i] = error(test$accel,y_hat,loss=loss_squared_error)
}
## AIC
aic_plot = 0
for (i in 1:20) {
y_hat = nadaraya_watson(train$accel, train$times, matrix(train$times),kern = kernel_k_nearest_neighbors, k=i)
aic_plot[i] <- aic(train$accel,y_hat, edf[i])
}
## BIC
bic_plot = 0
for (i in 1:20) {
y_hat = nadaraya_watson(train$accel, train$times, matrix(train$times),kern = kernel_k_nearest_neighbors, k=i)
bic_plot[i] <- bic(train$accel,y_hat, edf[i])
}
plot(1:20, testing_error_plot,ylim=c(0,1300), xlab="tuning parameter: K", ylab="AIC, BIC, and error")
points(1:20, bic_plot,col="green")
points(1:20, aic_plot,col="red")
points(1:20, training_error_plot,col="blue")
## 5-fold cross-validation of knnreg model
## create five folds
set.seed(1985)
fold  <- createFolds(mcycle$accel, k=5)
print(fold)
sapply(fold, length)  ## not all the same length
cvknnreg <- function(kNN = 10, flds=fold) {
cverr <- rep(NA, length(flds))
for(tst_idx in 1:length(flds)) { ## for each fold
## get training and testing data
mcycle_trn <- mcycle[-flds[[tst_idx]],]
mcycle_tst <- mcycle[ flds[[tst_idx]],]
## fit kNN model to training data
knn_fit <- knnreg(accel ~ times,
k=kNN, data=mcycle)
## compute test error on testing data
pre_tst <- predict(knn_fit, mcycle_tst)
cverr[tst_idx] <- mean((mcycle_tst$Income - pre_tst)^2)
}
return(cverr)
}
## Compute 5-fold CV for kNN = 1:20
cverrs <- sapply(1:20, cvknnreg)
print(cverrs) ## rows are k-folds (1:5), cols are kNN (1:20)
cverrs_mean <- apply(cverrs, 2, mean)
cverrs_sd   <- apply(cverrs, 2, sd)
cvknnreg <- function(kNN = 10, flds=fold) {
cverr <- rep(NA, length(flds))
for(tst_idx in 1:length(flds)) { ## for each fold
## get training and testing data
mcycle_trn <- mcycle[-flds[[tst_idx]],]
mcycle_tst <- mcycle[ flds[[tst_idx]],]
## fit kNN model to training data
knn_fit <- knnreg(accel ~ times,
k=kNN, data=mcycle)
## compute test error on testing data
pre_tst <- predict(knn_fit, mcycle_tst)
cverr[tst_idx] <- mean((mcycle_tst$accel - pre_tst)^2)
}
return(cverr)
}
## Compute 5-fold CV for kNN = 1:20
cverrs <- sapply(1:20, cvknnreg)
print(cverrs) ## rows are k-folds (1:5), cols are kNN (1:20)
cverrs_mean <- apply(cverrs, 2, mean)
cverrs_sd   <- apply(cverrs, 2, sd)
## Plot the results of 5-fold CV for kNN = 1:20
plot(x=1:20, y=cverrs_mean,
ylim=range(cverrs),
xlab="'k' in kNN", ylab="CV Estimate of Test Error")
segments(x0=1:20, x1=1:20,
y0=cverrs_mean-cverrs_sd,
y1=cverrs_mean+cverrs_sd)
best_idx <- which.min(cverrs_mean)
points(x=best_idx, y=cverrs_mean[best_idx], pch=20)
abline(h=cverrs_mean[best_idx] + cverrs_sd[best_idx], lty=3)
## 5-fold cross-validation of knnreg model
## create five folds
set.seed(2)
fold  <- createFolds(mcycle$accel, k=5)
print(fold)
sapply(fold, length)  ## not all the same length
cvknnreg <- function(kNN = 10, flds=fold) {
cverr <- rep(NA, length(flds))
for(tst_idx in 1:length(flds)) { ## for each fold
## get training and testing data
mcycle_trn <- mcycle[-flds[[tst_idx]],]
mcycle_tst <- mcycle[ flds[[tst_idx]],]
## fit kNN model to training data
knn_fit <- knnreg(accel ~ times,
k=kNN, data=mcycle)
## compute test error on testing data
pre_tst <- predict(knn_fit, mcycle_tst)
cverr[tst_idx] <- mean((mcycle_tst$accel - pre_tst)^2)
}
return(cverr)
}
## Compute 5-fold CV for kNN = 1:20
cverrs <- sapply(1:20, cvknnreg)
print(cverrs) ## rows are k-folds (1:5), cols are kNN (1:20)
cverrs_mean <- apply(cverrs, 2, mean)
cverrs_sd   <- apply(cverrs, 2, sd)
## Plot the results of 5-fold CV for kNN = 1:20
plot(x=1:20, y=cverrs_mean,
ylim=range(cverrs),
xlab="'k' in kNN", ylab="CV Estimate of Test Error")
segments(x0=1:20, x1=1:20,
y0=cverrs_mean-cverrs_sd,
y1=cverrs_mean+cverrs_sd)
best_idx <- which.min(cverrs_mean)
points(x=best_idx, y=cverrs_mean[best_idx], pch=20)
abline(h=cverrs_mean[best_idx] + cverrs_sd[best_idx], lty=3)
## 5-fold cross-validation of knnreg model
## create five folds
set.seed(42)
fold  <- createFolds(mcycle$accel, k=5)
print(fold)
sapply(fold, length)  ## not all the same length
cvknnreg <- function(kNN = 10, flds=fold) {
cverr <- rep(NA, length(flds))
for(tst_idx in 1:length(flds)) { ## for each fold
## get training and testing data
mcycle_trn <- mcycle[-flds[[tst_idx]],]
mcycle_tst <- mcycle[ flds[[tst_idx]],]
## fit kNN model to training data
knn_fit <- knnreg(accel ~ times,
k=kNN, data=mcycle)
## compute test error on testing data
pre_tst <- predict(knn_fit, mcycle_tst)
cverr[tst_idx] <- mean((mcycle_tst$accel - pre_tst)^2)
}
return(cverr)
}
## Compute 5-fold CV for kNN = 1:20
cverrs <- sapply(1:20, cvknnreg)
print(cverrs) ## rows are k-folds (1:5), cols are kNN (1:20)
cverrs_mean <- apply(cverrs, 2, mean)
cverrs_sd   <- apply(cverrs, 2, sd)
## Plot the results of 5-fold CV for kNN = 1:20
plot(x=1:20, y=cverrs_mean,
ylim=range(cverrs),
xlab="'k' in kNN", ylab="CV Estimate of Test Error")
segments(x0=1:20, x1=1:20,
y0=cverrs_mean-cverrs_sd,
y1=cverrs_mean+cverrs_sd)
best_idx <- which.min(cverrs_mean)
points(x=best_idx, y=cverrs_mean[best_idx], pch=20)
abline(h=cverrs_mean[best_idx] + cverrs_sd[best_idx], lty=3)
## 5-fold cross-validation of knnreg model
## create five folds
set.seed(42)
fold  <- createFolds(mcycle$accel, k=5)
print(fold)
sapply(fold, length)  ## not all the same length
cvknnreg <- function(kNN = 10, flds=fold) {
cverr <- rep(NA, length(flds))
for(tst_idx in 1:length(flds)) { ## for each fold
## get training and testing data
mcycle_trn <- mcycle[-flds[[tst_idx]],]
mcycle_tst <- mcycle[ flds[[tst_idx]],]
## fit kNN model to training data
knn_fit <- knnreg(accel ~ times,
k=kNN, data=mcycle)
## compute test error on testing data
pre_tst <- predict(knn_fit, mcycle_tst)
cverr[tst_idx] <- mean((mcycle_tst$accel - pre_tst)^2)
}
return(cverr)
}
## Compute 5-fold CV for kNN = 1:20
cverrs <- sapply(1:20, cvknnreg)
print(cverrs) ## rows are k-folds (1:5), cols are kNN (1:20)
cverrs_mean <- apply(cverrs, 2, mean)
cverrs_sd   <- apply(cverrs, 2, sd)
## Plot the results of 5-fold CV for kNN = 1:20
plot(x=1:20, y=cverrs_mean,
ylim=range(cverrs),
xlab="'k' in kNN", ylab="CV Estimate of Test Error")
segments(x0=1:20, x1=1:20,
y0=cverrs_mean-cverrs_sd,
y1=cverrs_mean+cverrs_sd)
best_idx <- which.min(cverrs_mean)
points(x=best_idx, y=cverrs_mean[best_idx], pch=20)
abline(h=cverrs_mean[best_idx] + cverrs_sd[best_idx], lty=3)
## 5-fold cross-validation of knnreg model
## create five folds
set.seed(999)
fold  <- createFolds(mcycle$accel, k=5)
print(fold)
sapply(fold, length)  ## not all the same length
cvknnreg <- function(kNN = 10, flds=fold) {
cverr <- rep(NA, length(flds))
for(tst_idx in 1:length(flds)) { ## for each fold
## get training and testing data
mcycle_trn <- mcycle[-flds[[tst_idx]],]
mcycle_tst <- mcycle[ flds[[tst_idx]],]
## fit kNN model to training data
knn_fit <- knnreg(accel ~ times,
k=kNN, data=mcycle)
## compute test error on testing data
pre_tst <- predict(knn_fit, mcycle_tst)
cverr[tst_idx] <- mean((mcycle_tst$accel - pre_tst)^2)
}
return(cverr)
}
## Compute 5-fold CV for kNN = 1:20
cverrs <- sapply(1:20, cvknnreg)
print(cverrs) ## rows are k-folds (1:5), cols are kNN (1:20)
cverrs_mean <- apply(cverrs, 2, mean)
cverrs_sd   <- apply(cverrs, 2, sd)
## Plot the results of 5-fold CV for kNN = 1:20
plot(x=1:20, y=cverrs_mean,
ylim=range(cverrs),
xlab="'k' in kNN", ylab="CV Estimate of Test Error")
segments(x0=1:20, x1=1:20,
y0=cverrs_mean-cverrs_sd,
y1=cverrs_mean+cverrs_sd)
best_idx <- which.min(cverrs_mean)
points(x=best_idx, y=cverrs_mean[best_idx], pch=20)
abline(h=cverrs_mean[best_idx] + cverrs_sd[best_idx], lty=3)
length(fold)
## Plot the results of 5-fold CV for kNN = 1:20
plot(x=1:20, y=cverrs_mean,
ylim=range(cverrs),
xlab="'k' in kNN", ylab="CV Estimate of Test Error")
segments(x0=1:20, x1=1:20,
y0=cverrs_mean-cverrs_sd,
y1=cverrs_mean+cverrs_sd)
best_idx <- which.min(cverrs_mean)
points(x=best_idx, y=cverrs_mean[best_idx], pch=20)
abline(h=cverrs_mean[best_idx] + cverrs_sd[best_idx], lty=3)
## 5-fold cross-validation of knnreg model
## create five folds
set.seed(99)
fold  <- createFolds(mcycle$accel, k=5)
print(fold)
sapply(fold, length)  ## not all the same length
cvknnreg <- function(kNN = 10, flds=fold) {
cverr <- rep(NA, length(flds))
for(tst_idx in 1:length(flds)) { ## for each fold
## get training and testing data
mcycle_trn <- mcycle[-flds[[tst_idx]],]
mcycle_tst <- mcycle[ flds[[tst_idx]],]
## fit kNN model to training data
knn_fit <- knnreg(accel ~ times,
k=kNN, data=mcycle)
## compute test error on testing data
pre_tst <- predict(knn_fit, mcycle_tst)
cverr[tst_idx] <- mean((mcycle_tst$accel - pre_tst)^2)
}
return(cverr)
}
## Compute 5-fold CV for kNN = 1:20
cverrs <- sapply(1:20, cvknnreg)
print(cverrs) ## rows are k-folds (1:5), cols are kNN (1:20)
cverrs_mean <- apply(cverrs, 2, mean)
cverrs_sd   <- apply(cverrs, 2, sd)
## Plot the results of 5-fold CV for kNN = 1:20
plot(x=1:20, y=cverrs_mean,
ylim=range(cverrs),
xlab="'k' in kNN", ylab="CV Estimate of Test Error")
segments(x0=1:20, x1=1:20,
y0=cverrs_mean-cverrs_sd,
y1=cverrs_mean+cverrs_sd)
best_idx <- which.min(cverrs_mean)
points(x=best_idx, y=cverrs_mean[best_idx], pch=20)
abline(h=cverrs_mean[best_idx] + cverrs_sd[best_idx], lty=3)
cvknnreg <- function(kNN , flds=fold) {
cverr <- rep(NA, length(flds))
for(tst_idx in 1:length(flds)) { ## for each fold
## get training and testing data
mcycle_trn <- mcycle[-flds[[tst_idx]],]
mcycle_tst <- mcycle[ flds[[tst_idx]],]
## fit kNN model to training data
knn_fit <- knnreg(accel ~ times,
k=kNN, data=mcycle)
## compute test error on testing data
pre_tst <- predict(knn_fit, mcycle_tst)
cverr[tst_idx] <- mean((mcycle_tst$accel - pre_tst)^2)
}
return(cverr)
}
## Compute 5-fold CV for kNN = 1:20
cverrs <- sapply(1:20, cvknnreg)
print(cverrs) ## rows are k-folds (1:5), cols are kNN (1:20)
cverrs_mean <- apply(cverrs, 2, mean)
cverrs_sd   <- apply(cverrs, 2, sd)
## Plot the results of 5-fold CV for kNN = 1:20
plot(x=1:20, y=cverrs_mean,
ylim=range(cverrs),
xlab="'k' in kNN", ylab="CV Estimate of Test Error")
segments(x0=1:20, x1=1:20,
y0=cverrs_mean-cverrs_sd,
y1=cverrs_mean+cverrs_sd)
best_idx <- which.min(cverrs_mean)
points(x=best_idx, y=cverrs_mean[best_idx], pch=20)
abline(h=cverrs_mean[best_idx] + cverrs_sd[best_idx], lty=3)
View(cverrs)
View(mcycle)
cvknnreg <- function(kNN, flds=fold) {
cverr <- rep(NA, length(flds))
for(test_idx in 1:length(flds)) { ## for each fold
## get training and testing data
mcycle_train <- mcycle[-flds[[test_idx]],]
mcycle_test <- mcycle[ flds[[test_idx]],]
## fit kNN model to training data
knn_fit <- knnreg(accel ~ times,
k=kNN, data=mcycle)
## compute test error on testing data
pre_test <- predict(knn_fit, mcycle_test)
cverr[test_idx] <- mean((mcycle_test$accel - pre_test)^2)
}
return(cverr)
}
## Compute 5-fold CV for kNN = 1:20
cverrs <- sapply(1:20, cvknnreg)
print(cverrs) ## rows are k-folds (1:5), cols are kNN (1:20)
cverrs_mean <- apply(cverrs, 2, mean)
cverrs_sd   <- apply(cverrs, 2, sd)
cvknnreg <- function(kNN, flds=fold) {
cverr <- rep(NA, length(flds))
for(test_idx in 1:length(flds)) { ## for each fold
## get training and testing data
mcycle_train <- mcycle[-flds[[test_idx]],]
mcycle_test <- mcycle[ flds[[test_idx]],]
## fit kNN model to training data
knn_fit <- knnreg(accel ~ times,
k=kNN, data=mcycle_train)
## compute test error on testing data
pre_test <- predict(knn_fit, mcycle_test)
cverr[test_idx] <- mean((mcycle_test$accel - pre_test)^2)
}
return(cverr)
}
## Compute 5-fold CV for kNN = 1:20
cverrs <- sapply(1:20, cvknnreg)
print(cverrs) ## rows are k-folds (1:5), cols are kNN (1:20)
cverrs_mean <- apply(cverrs, 2, mean)
cverrs_sd   <- apply(cverrs, 2, sd)
## Plot the results of 5-fold CV for kNN = 1:20
plot(x=1:20, y=cverrs_mean,
ylim=range(cverrs),
xlab="'k' in kNN", ylab="CV Estimate of Test Error")
segments(x0=1:20, x1=1:20,
y0=cverrs_mean-cverrs_sd,
y1=cverrs_mean+cverrs_sd)
best_idx <- which.min(cverrs_mean)
points(x=best_idx, y=cverrs_mean[best_idx], pch=20)
abline(h=cverrs_mean[best_idx] + cverrs_sd[best_idx], lty=3)
